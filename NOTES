Create a Menu class for displaying & navigating arbitrary menu options
w/typical animations, font selection, alignment, etc.

Refactor player movement, rotation etc code into reusable generic functions
suitable for different games.

Possibly use vectors graphics instead of bitmaps and size them against a ratio
of the window size.

Add a Game or App class which the main functions, loop reside in. This way we
can inherit things from this base class like the window, globally-required
objects, physics world, etc., rather than having to pass pointers all around.
See GQE structure. Main app class has a run() member which is the main()
function and game loop.

Create another state class layer for Level or Gameplay. Expand upon that to
subdivide into levels, planets, rooms, etc.

Implement rest of debug draw functions. Fix colors so that they make sense and
have transparency to see objects underneath. Match colors of box2d testbed?
Allow runtime toggling of the individual draw functions.

Disallow resizing the window? As this fucks with lots of things that will
otherwise have to be compensated for, which adds complexity. Most games seem
to deal with this by simply requiring a restart to change resolution.

Build resource loading methods in App (or use a seperate class that gets
called from App?) for loading and handling fonts, sprites, textures, etc.
